#!/bin/bash

MAINREPO="/hostdir/binpkgs"
REPOS_GLIBC="$MAINREPO $MAINREPO/nonfree $MAINREPO/multilib $MAINREPO/multilib/nonfree $MAINREPO/debug"
REPOS_MUSL="$MAINREPO/musl $MAINREPO/musl/nonfree $MAINREPO/musl/debug"
REPOS_AARCH64="$MAINREPO/aarch64 $MAINREPO/aarch64/debug $MAINREPO/aarch64/nonfree"

ARCHS_GLIBC="i686 x86_64 armv6l armv7l"
ARCHS_MUSL="x86_64-musl armv6l-musl armv7l-musl"
ARCHS_AARCH64="aarch64 aarch64-musl"

: ${XBPS_DISTDIR:=/void-packages}

usage() {
	echo "Usage: $0 <glibc|musl|aarch64> [remove-unexistent-pkgs]"
	exit 1
}

add() {
	local _arch="$1"
	local _repo="$2"

	[ ! -d ${_repo} ] && return

	echo "Registering pkgs for $_arch in $_repo"
	for f in ${_repo}/*.{${_arch},noarch}.xbps; do
		XBPS_TARGET_ARCH=${_arch} xbps-rindex -a ${f} 2>/dev/null
	done
}

clean() {
	local _arch="$1"
	local _repo="$2"
	
	[ ! -d ${_repo} ] && return

	echo "Cleaning repo $_repo for $_arch"
	XBPS_TARGET_ARCH=${_arch} xbps-rindex -c ${_repo} 2>/dev/null
}

remove() {
	local _arch="$1"
	local _repo="$2"

	[ ! -d ${_repo} ] && return

	# do not delete packages if there are staged packages
	[ -e "${_repo}/${_arch}-stagedata" ] && exit 0
	echo "Removing obsolete pkgs for $arch in $_repo"
	XBPS_TARGET_ARCH=${_arch} xbps-rindex -r ${_repo} 2>/dev/null
}

remove_unexistent() {
	local _arch="$1"
	local _repo="$2"
	local _distdir="$HOME/void-packages"

	[ ! -d ${_repo} ] && return

	if [ ! -d "${_distdir}" ]; then
		cd $HOME
		git clone https://github.com/void-linux/void-packages
	else
		cd "${_distdir}"
		git pull
	fi

	echo "Removing unexistent pkgs for $_arch in $_repo"
	for f in $(XBPS_TARGET_ARCH=${_arch} xbps-checkvers -i -R ${_repo} -D "${_distdir}" -e --format="%R/%n-%r.${_arch}.xbps"); do
		[ ! -e "$f" ] && continue
		rm -vf "$f"
	done
}

if [ "$1" = "glibc" ]; then
	if [ -n "$2" ]; then
		for repo in ${REPOS_GLIBC}; do
			for arch in ${ARCHS_GLIBC}; do
				remove_unexistent $arch $repo
			done
		done
	fi

	for repo in ${REPOS_GLIBC}; do
		for arch in ${ARCHS_GLIBC}; do
			add $arch $repo
		done
	done
	for repo in ${REPOS_GLIBC}; do
		for arch in ${ARCHS_GLIBC}; do
			clean $arch $repo
			remove $arch $repo
		done
	done
elif [ "$1" = "musl" ]; then
	if [ -n "$2" ]; then
		for repo in ${REPOS_MUSL}; do
			for arch in ${ARCHS_MUSL}; do
				remove_unexistent $arch $repo
			done
		done
	fi

	for repo in ${REPOS_MUSL}; do
		for arch in ${ARCHS_MUSL}; do
			add $arch $repo
		done
	done
	for repo in ${REPOS_MUSL}; do
		for arch in ${ARCHS_MUSL}; do
			echo "cleaning $repo $arch"
			clean $arch $repo
			remove $arch $repo
		done
	done
elif [ "$1" = "aarch64" ]; then
	if [ -n "$2" ]; then
		for repo in ${REPOS_AARCH64}; do
			for arch in ${ARCHS_AARCH64}; do
				remove_unexistent $arch $repo
			done
		done
	fi
	for repo in ${REPOS_AARCH64}; do
		for arch in ${ARCHS_AARCH64}; do
			add $arch $repo
		done
	done
	for repo in ${REPOS_AARCH64}; do
		for arch in ${ARCHS_AARCH64}; do
			clean $arch $repo
			remove $arch $repo
		done
	done
else
	usage
	exit 1
fi

exit 0
