# -*- python -*-
# ex: set syntax=python:

import sys
sys.path.append('/{{ buildmaster_rootdir }}/buildmaster/scripts')

from buildbot.buildslave import BuildSlave
from buildbot.changes.gitpoller import GitPoller
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps import shell
from buildbot.steps.shell import ShellCommand
from buildbot.steps.slave import RemoveDirectory
from buildbot.steps.shell import Configure
from buildbot.steps.shell import Compile
from buildbot.process.properties import WithProperties
from buildbot.config import BuilderConfig
from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.status import words
from buildbot.status import results
from buildbot.status.results import SUCCESS, FAILURE, WARNINGS

import user_settings
from ShellCommandChangeList import ShellCommandChangeList

ENV = {
	'PATH': '/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin'
}

c = BuildmasterConfig = {
	'slavePortnum': 9989,
	'slaves': [],
	'change_source': [],
	'schedulers': [],
	'builders': [],
	'mergeRequests': True
}

OS='Linux'
proj="Void %s" % OS

for m in user_settings.machines:
	c['slaves'].append(
		BuildSlave(m['slave_name'], m['slave_pass'], properties={
			'os': OS, 'mach': m['mach'], 'project': proj
		}, keepalive_interval=600)
	)

	m['bulk_scheduler'] = SingleBranchScheduler(
		name="%s_bulk_scheduler" % m['mach'],
		change_filter=filter.ChangeFilter(
			branch=['master']
		),
		treeStableTimer=None,
		builderNames=["%s_builder" % m['mach']]
	)
	c['schedulers'].append(m['bulk_scheduler'])

	builddir  = WithProperties("%s", 'buildnumber')
	distdir	  = 'void-packages'
	bulkdir	  = 'xbps-bulk'
	masterdir = 'chroot'
	hostdir	  = m['hostdir']
	crosstarget = m['crosstarget']
	subarch = m['subarch']
	BootstrapArgs = m['BootstrapArgs']

	xbps_packages_url = 'git://github.com/void-linux/void-packages.git'
	bulk_url = 'git://github.com/void-linux/xbps-bulk.git'

	BootstrapZap = """
{distdir}/xbps-src -m {masterdir} zap
""".format(distdir=distdir, masterdir=masterdir)

	BootstrapUpdate = """
{distdir}/xbps-src -m {masterdir} -H {hostdir} bootstrap-update
""".format(distdir=distdir, masterdir=masterdir, hostdir=hostdir)

	BootstrapInstall = """
{distdir}/xbps-src {BootstrapArgs} -m {masterdir} -H {hostdir} binary-bootstrap {subarch}
""".format(BootstrapArgs=BootstrapArgs, distdir=distdir, masterdir=masterdir, hostdir=hostdir, subarch=subarch)

	CleanObsoletes = """
{distdir}/xbps-src -H {hostdir} -a {mach} remove-obsoletes
""".format(distdir=distdir, hostdir=hostdir, mach=m['mach'])

	bulk_conf = ["../%s/configure" % bulkdir,
			'-a', crosstarget,
			'-d', "../%s"  % distdir,
			'-m', "../%s"  % masterdir,
			'-h', hostdir, '-t']
	get_pkgs  = ['make', 'print_pkgs']
	bulk_make = ['make']

	bulk_clean_step = Git(repourl=bulk_url, branch='master',
		mode='incremental', haltOnFailure=True,
		logEnviron=False, progress=True, workdir=bulkdir,
		alwaysUseLatest=True,
		description=['Updating xbps-bulk from git'],
		descriptionDone=['xbps-bulk updated'])
	git_clean_step = Git(repourl=xbps_packages_url, branch='master',
		mode='incremental', haltOnFailure=True,
		logEnviron=False, progress=True, workdir=distdir,
		alwaysUseLatest=True,
		description=['Updating void-packages from git'],
		descriptionDone=['void-packages updated'])
	bootzap_step = ShellCommand(command=BootstrapZap, logEnviron=False,
		description=['Zapping xbps-src masterdir'],
		descriptionDone=['xbps-src masterdir zap'],
		workdir='.', haltOnFailure=True)
	bootup_step = ShellCommand(command=BootstrapUpdate, logEnviron=False,
		description=['Updating xbps-src bootstrap pkgs'],
		descriptionDone=['xbps-src bootstrap-update done'],
		workdir='.', haltOnFailure=True)
	bootinst_step = ShellCommand(command=BootstrapInstall, logEnviron=False,
		description=['Installing xbps-src bootstrap pkgs'],
		descriptionDone=['xbps-src binary-bootstrap done'],
		workdir='.', haltOnFailure=True)
	conf_step = ShellCommandChangeList(command=bulk_conf, logEnviron=False,
		description=['Finding new packages to build'],
		descriptionDone=['Found packages'],
		workdir=builddir, haltOnFailure=True)
	get_pkgs_step = shell.SetProperty(command=get_pkgs, property='pkgs',
		logEnviron=False, workdir=builddir, haltOnFailure=True)
	make_step = ShellCommand(command=bulk_make, logEnviron=False,
		description=[WithProperties("Building packages: %s", 'pkgs')],
		descriptionDone=[WithProperties("Finished building packages: %s", 'pkgs')],
		workdir=builddir, haltOnFailure=True, usePTY=True, timeout=14400,
		decodeRC={0:SUCCESS,1:FAILURE,2:FAILURE})
	clean_repo_step = ShellCommand(command=CleanObsoletes, logEnviron=False,
		description=[WithProperties("Cleaning obsolete packages")],
		descriptionDone=[WithProperties("Cleaning complete")],
		workdir='.', haltOnFailure=True, usePTY=True, timeout=900,
		decodeRC={0:SUCCESS,1:FAILURE,2:FAILURE})

	m['bulk_factory_steps'] = [
		bulk_clean_step, git_clean_step, bootinst_step,
		bootup_step, conf_step, get_pkgs_step, make_step,
		clean_repo_step
	]
	m['bulk_factory'] = BuildFactory(m['bulk_factory_steps'])
	m['bulk_factory'].useProgress = False

	m["bulk_builder"] = BuilderConfig(
		name="%s_builder" % m['mach'],
		slavenames=[m['slave_name']],
		factory=m['bulk_factory'],
		env=ENV
	)
	c['builders'].append(m['bulk_builder'])

authz_cfg=authz.Authz(
	auth=auth.BasicAuth(user_settings.web_users),
	gracefulShutdown = 'auth', forceBuild = 'auth', forceAllBuilds = 'auth',
	pingBuilder = 'auth', stopBuild = 'auth', stopAllBuilds = 'auth',
	stopChange = 'auth', cancelPendingBuild = 'auth', showUsersPage = 'auth'
)

c['status'] = [
	html.WebStatus(
		http_port=8010, authz=authz_cfg, order_console_by_time=True,
		change_hook_dialects={ 'github' : {
					'secret': '{{ buildmaster_github_secret }}',
					'strict': True
					}
				},
		change_hook_auth=["file:/{{ buildmaster_rootdir}}/github-webhook.passwd"]
	),
	words.IRC(
		host='chat.freenode.net',
		nick='xbps-builder',
		channels=[{'channel': '#xbps'}],
		notify_events={ 'failure' : 1 },
		noticeOnChannel=True, useRevisions=True
	)
]

c['title'] = proj
c['titleURL'] = 'http://www.voidlinux.org/'
c['buildbotURL'] = 'https://build.voidlinux.org/'
c['db'] = { 'db_url' : 'sqlite:///state.sqlite' }
